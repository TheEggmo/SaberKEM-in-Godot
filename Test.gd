extends Node2D

func _ready():
	var p1 = Polynomial.new(Params.n)
	p1.read_array([0,5,6,4,0,1,5,5])
	var p2 = Polynomial.new(Params.n)
	p2.read_array([7,6,2,6,6,5,6,6])
	var p3 = Polynomial.new(Params.n)
	p3.read_array([0,4,2,3,1,7,3,1])
	var p4 = Polynomial.new(Params.n)
	p4.read_array([1,6,5,0,6,6,4,1])
	var m1 = PolyMatrix.new(2,1,8)
	var m2 = PolyMatrix.new(2,1,8)
	m1.set_value(0,0,p1)
	m1.set_value(1,0,p2)
	m2.set_value(0,0,p3)
	m2.set_value(1,0,p4)
	var s1 = Utils.poly_mult(p1, p3)
	var s2 = Utils.poly_mult(p2, p4)
	var out = Utils.poly_add(s1, s2)
	out.mod_coefficients(Params.p)
	print(out)

#	matrix_modulo_test()

func matrix_modulo_test():
	print("Begin matrix modulo test")
	var mat := Utils.random_matrix(2,2,8,16)
	mat.print_values()
	print("Modulate by 8:")
	mat.mod_values(8)
	mat.print_values()

func matrix_duplicate_test():
	print("Begin matrix duplicate test")
	var mat := Utils.random_matrix(2,2,8,16)
	var mat2 = Utils.duplicate_matrix(mat)
	mat.print_values()
	mat = Utils.random_matrix(2,2,8,16)
	mat2.print_values()

func matrix_shift_test():
	print("Begin matrix shift test")
	var mat := Utils.random_matrix(2,2,8,16)
	mat.print_values()
	var mat2 = Utils.duplicate_matrix(mat)
	print("Shift right by 2:")
	mat.shift_right(2)
	mat.print_values()
	print("Shift left by 2:")
	mat2.shift_left(2)
	mat2.print_values()

func poly_shift_test():
	print("Begin poly shift test")
	var poly = Utils.random_poly(8,256)
	var poly2 = Utils.random_poly(8,256) 
	print("Poly: %s" % poly)
	poly.shift_right(5)
	print("Poly shift right by 5: %s" % poly)
	print("Poly2: %s" % poly2)
	poly2.shift_left(5)
	print("Poly2 shift left by 5: %s" % poly2)

func poly_functions_test():
	print("Begin basic poly test")
	var poly1 = Utils.random_poly(8, 16)
	var poly2 = Utils.random_poly(8, 16)
	
	print(poly1)
	print(poly2)
	print("Add/sub test:")
	print(Utils.poly_add(poly1,poly2))
	print(Utils.poly_sub(poly1,poly2))
	print("Mult test:")
	var mult = Utils.poly_mult(poly1,poly2)
	print(mult)
	print("Modulo test:")
	mult.mod_coefficients(8)
	print(mult)
	
	print("Negative modulo test:")
	var negative :Polynomial = Utils.random_poly_negatives(8, 8)
	print(negative)
	negative.mod_coefficients(8)
	print(negative)

func matrix_mult_test():
	print("Begin matrix mult test")
	var poly00 :Polynomial = Polynomial.new(8)
	poly00.read_array([2,11,13,10,9,1,8,13])
	var poly01 :Polynomial = Polynomial.new(8)
	poly01.read_array([0,11,5,8,1,15,1,10])
	var poly10 :Polynomial = Polynomial.new(8)
	poly10.read_array([11,1,2,3,6,13,0,5])
	var poly11 :Polynomial = Polynomial.new(8)
	poly11.read_array([4,14,10,5,13,3,7,15])

	var mat :PolyMatrix = PolyMatrix.new(2,2,8)
	mat.set_value(0,0,poly00)
	mat.set_value(0,1,poly01)
	mat.set_value(1,0,poly10)
	mat.set_value(1,1,poly11)
	mat.print_values()
#	Utils.matrix_transpose(mat).print_values()
	var mat2 :PolyMatrix = PolyMatrix.new(2,1,8)
	mat2.set_value(0,0,poly00)
	mat2.set_value(1,0,poly01)

	print("Matrix mult funciton")
	Utils.matrix_mult(mat, mat2, 8).print_values()
	print("Matrix mult manual")
	var out0 = Utils.poly_add(Utils.poly_mult(poly00, poly00), Utils.poly_mult(poly01, poly01))
	var out1 = Utils.poly_add(Utils.poly_mult(poly10, poly00), Utils.poly_mult(poly11, poly01))
	out0.mod_coefficients(8)
	out1.mod_coefficients(8)
	print(out0)
	print(out1)
